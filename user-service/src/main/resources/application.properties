# Start config service
#server.address=0.0.0.0
eureka.client.register-with-eureka=true
eureka.client.service-url.defaultZone=http://localhost:8761/eureka
spring.cloud.config.import-check.enabled=false
spring.cloud.config.fail-fast=true
spring.application.name=user-service
server.port=6992
server.servlet.context-path=/biochar/user-service
spring.main.banner-mode=off
# End config service

# Start h2 database
#jdbc:h2:~/test     jdbc:h2:mem:testdb
spring.datasource.url=jdbc:h2:~/user
SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
# spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=update
### If you're using Hibernate to generate your database schema, you can configure it to
### automatically escape table names. This can be done by setting
### the hibernate.globally_quoted_identifiers property to true in your Hibernate configuration.
### Here's an example of how to do this in your application.properties or application.yml file:
###This will make Hibernate automatically quote all table names, allowing you to use reserved keywords.
###Choose the option that best fits your application's requirements and configuration.
spring.jpa.properties.hibernate.globally_quoted_identifiers=true
spring.h2.console.enabled=true
spring.h2.console.path=/h2
# End h2 database


spring.servlet.multipart.enabled=true
# Threshold after which files are written to disk.
spring.servlet.multipart.file-size-threshold=2KB
# Max file size.
spring.servlet.multipart.max-file-size=200MB
# Max Request Size
spring.servlet.multipart.max-request-size=215MB

#Start config pages and folders
myApp.file.forgotPassword_HTML =./src/main/resources/user/html/forgot-password.html
myApp.file.ConfirmMail_HTML =./src/main/resources/user/html/verify-mail-correct.html
myApp.file.PermissionRole_HTML =./src/main/resources/user/html/permission-role.html
myApp.file.defaultUserPhoto =./src/main/resources/user/img/user.png
myApp.file.defaultCoverPhoto =./src/main/resources/user/img/cover-hygiene-hopital.jpg
#home page web
myApp.link.WebPage=http://localhost:4200
myApp.link.Path.signIn=/sign-in
myApp.link.Path.update_password_forgot=/update-password-forgot
myApp.link.Path.error=/page-error
#home service user
myApp.link.GlobalBackEnd=http://localhost:8088
#home atachement user
myApp.link.Path.AttachementDownload=/attachment/download/
#End config pages and folders

# Start Mail smtp
myApp.smtp.host =smtp.gmail.com
myApp.smtp.auth = true
myApp.smtp.enableStarttls = true
myApp.smtp.username=belhsenbachouch55@gmail.com
myApp.smtp.password=myrxsnxvipttpqjb
# End Mail smtp

# Start keycloak Admin
keycloak.serverUrl=http://localhost:8181/
keycloak.realm=spring-boot-microservices-biochar-realm
keycloak.clientId=spring-cloud-client
keycloak.clientSecret=ZsaSJiYO7GrFGr11nNH9NhyYSMSe6Zvj
keycloak.userName=belhsen97
keycloak.password=admin
keycloak.url_login=${keycloak.serverUrl}realms/${keycloak.realm}/protocol/openid-connect/token
keycloak.url_logout=${keycloak.serverUrl}realms/${keycloak.realm}/protocol/openid-connect/logout


# End keycloak Admin

# Start outh2 security
spring.security.oauth2.resourceserver.jwt.issuer-uri=${keycloak.serverUrl}realms/${keycloak.realm}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs
spring.security.oauth2.client.registration.oauth2-client-credentials.client-id=${keycloak.clientId}
spring.security.oauth2.client.registration.oauth2-client-credentials.client-secret=${keycloak.clientSecret}
spring.security.oauth2.client.registration.oauth2-client-credentials.scope=openid, profile, roles
spring.security.oauth2.client.registration.oauth2-client-credentials.authorization-grant-type=password
jwt.auth.converter.resource-id=spring-cloud-client
jwt.auth.converter.principle-attribute=preferred_username
# End outh2 security